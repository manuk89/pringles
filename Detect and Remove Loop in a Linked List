//LINKED LIST : 

//Detect and Remove Loop in a Linked List -


//Detection - 

#include<bits/stdc++.h>
Using namespace std;

Struct Node 
{
 Int data;
Struct Node* next; 
};

Void push(struct Node ** head_ref, int new_date)
{
Struct Node* new_node = new Node;
new_node->data = new_date;
new_node-> next=(*head_ref);
(*head_ref)= new_node;
};

//Using Hashing

Bool detectLoop(struct Node *h)
{
unordered_set<Node *> s;
while(h != NULL)
{ if(s.find(h)!= s.end())
   Return true;
  s.insert(h);
h=h->next;
}
Return false;
};

//Floyd’s Cycle-Finding Algorithm

Int detectLoop(struct Node *list)
{
Struct Node *slow_p=list,  *fast_p=list;
while(slow_p && fast_p && fast_p->next)
{
 slow_p=slow_p->next;
fast_p=fast_p->next->next;
if(slow_p == fast_p)
{ print(“Found Loop”);
 Return 1;
}
Return 0;
};

Int main()
{
Struct Node* head = NULL;

push(&head,20);
push(&head,4);
push(&head, 15);
push(&head, 10);

head->next>next>next->next= head;

if (detectLoop(head))
cout<< ‘Loop Found’;
Else
cout<<”No Loop”;

return ;
}
